/* The initial version of the sender code for the ESP32 Solar
Weather Station. Free to use, copy, and modify for personal use;

Ensure to update the "receiver MAC address" with the actual 
MAC address for your receiver board                        */



#include <SPI.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_LTR390.h>
#include <Adafruit_PM25AQI.h>
#include <SparkFun_AS3935.h>
#include <SparkFun_Weather_Meter_Kit_Arduino_Library.h>
#include <esp_now.h>
#include <WiFi.h>

// Define the BME688 sensor
Adafruit_BME680 bme;

//Define the LTR390 sensor
Adafruit_LTR390 ltr = Adafruit_LTR390();

//Define the PMSA003I sensor
Adafruit_PM25AQI aqi = Adafruit_PM25AQI();

int rainfallPin = 7;
int windDirectionPin = 15;
int windSpeedPin = 16;

SFEWeatherMeterKit weatherMeterKit( windDirectionPin, windSpeedPin, rainfallPin);

// Begin Lightning Detector - Define
#define SCK = 12;  // SCK pin GPIO12
#define MISO = 13;  // MISO pin GPIO13
#define MOSI = 11;  // MOSI pin GPIO11 

#define INDOOR 0x12 
#define OUTDOOR 0xE
#define LIGHTNING_INT 0x08
#define DISTURBER_INT 0x04
#define NOISE_INT 0x01

float seaLevel = 1013.25; // Standard sea Level pressure in hectopascals

SparkFun_AS3935 lightning;

// Interrupt pin for lightning detection 
const int lightningInt = 21; 
int spiCS = 14; //SPI chip select pin

// Values for modifying the IC's settings. All of these values are set to their
// default values. 
byte noiseFloor = 5;
byte watchDogVal = 5;
byte spike = 5;
byte lightningThresh = 5; 

// This variable holds the number representing the lightning or non-lightning
// event issued by the lightning detector. 
int intVal = 0;
int noise = 2; // Value between 1-7 
int disturber = 2; // Value between 1-10
// End Lightning Detector - Define

// Define Noctua Fan 
#define FAN_PIN 17

// PID Controller Constants
double Kp = 1.0; // Proportional gain
double Ki = 0.1; // Integral gain
double Kd = 0.01; // Derivative gain
// PID Controller Variables
double previousError = 0;
double integral = 0;

// MAC address of the receiver ESP32
uint8_t receiverAddress[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //Replace w/ actual MAC address of Receiver

// Structure to hold the readings
typedef struct struct_message {
  float temperature;
  float humidity;
  float pressure;
  float uvs;
  float als;
  float pm10;
  float pm25;
  float pm100;
  float rainfall;
  float windspeed;
  float winddir;
  bool lightningDetected;
  float lightningDistance;
  float fanSpeed;
  float solarVoltage;
  float batVoltage;
} struct_message;

struct_message SensorData;

esp_now_peer_info_t peerInfo;

const int sensorPowerPin = 42;
const int solarVoltSensePin = 4;
const float solarVoltR1 = 200000.0; // 200 Kohm resistor
const float solarVoltR2 = 50000.0; // 50 Kohm resistor
const int batVoltSensePin = 5;
const float batVoltR1 = 200000.0; // 200 Kohm resistor
const float batVoltR2 = 100000.0; // 100 Kohm resistor

void setupLightningDet() {
  if( !lightning.beginSPI(spiCS, 2000000) ){ 
    Serial.println ("Lightning Detector did not start up, freezing!"); 
    while(1); 
  }
  else {
    Serial.println("AS3935 Lightning Detector Ready!");

    lightning.maskDisturber(true);
    lightning.setNoiseLevel(noiseFloor);  
    lightning.watchdogThreshold(watchDogVal);
    lightning.spikeRejection(spike);
    lightning.lightningThreshold(lightningThresh);
    lightning.setIndoorOutdoor(OUTDOOR);
  }
}

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  // When Lightning is detected the interrupt pin goes HIGH
  pinMode(lightningInt, INPUT);
  pinMode(sensorPowerPin, OUTPUT); // Set Sensor Power Pin as OUTPUT
  digitalWrite(sensorPowerPin, HIGH);  // Turn on the sensor power
  delay(2000); // 2 second delay before Serial Initialization.
  Serial.begin(115200);
  Wire.begin(1,2); //sda on GPIO 1, scl on GPIO 2
  SPI.begin();
  WiFi.mode(WIFI_STA); //Set device as a WI-FI Station
  delay(2500);

  pinMode(FAN_PIN, OUTPUT);
  analogReadResolution(12); // Set ADC to 12-bit resolution 

  setupLightningDet();

  weatherMeterKit.setADCResolutionBits(16);
  weatherMeterKit.begin();

  if (! aqi.begin_I2C()) {  // Initialize the sensor with I2c Address and Wire object
    Serial.println("Could not find PMSA003I sensor!");
    while (1) delay(10);
  }
  Serial.println("PMSA003I sensor found!"); 

  if (!ltr.begin()) {  // Initialize the LTR390 sensor with I2C address 0x53 and Wire object
    Serial.println("Could not find LTR390 sensor!");
    while (1);
  }
  Serial.println("LTR390 sensor found!");

  ltr.setGain(LTR390_GAIN_3);
  Serial.print("Gain : ");
  switch (ltr.getGain()) {
    case LTR390_GAIN_1: Serial.println(1); break;
    case LTR390_GAIN_3: Serial.println(3); break;
    case LTR390_GAIN_6: Serial.println(6); break;
    case LTR390_GAIN_9: Serial.println(9); break;
    case LTR390_GAIN_18: Serial.println(18); break;
  }

  ltr.setResolution(LTR390_RESOLUTION_18BIT); // Set resolution to 20-bit
  Serial.print("Resolution : ");
  switch (ltr.getResolution()) {
    case LTR390_RESOLUTION_13BIT: Serial.println(13); break;
    case LTR390_RESOLUTION_18BIT: Serial.println(18); break; // Adjust this line to match the set resolution
  }

  // Initialize the BME688 sensor
  if (!bme.begin(0x77)) {
    Serial.println("Could not find BME688 sensor!");
    while (1);
  }
  Serial.println(F("BME688 sensor found!"));

  // Set up the BME680 sensor
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320Â°C for 150 ms

  // Initialize ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW initialization failed");
    while (1);
  }
  Serial.println("ESP-NOW Initialized!");

  esp_now_register_send_cb(OnDataSent);

  // Register the peer (receiver) ESP32
  memcpy(peerInfo.peer_addr, receiverAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    while (1);
  }
  Serial.println("Peer device added!");

}

void loop() {
  // Read sensor data
  int solarRawValue = analogRead(solarVoltSensePin);
  int batRawValue = analogRead(batVoltSensePin);
  float solarVoltage = (float)solarRawValue / 4095.0 * 3.3 * (solarVoltR1 + solarVoltR2) / solarVoltR2;
  float batVoltage = (float)batRawValue / 4095.0 * 3.3 * (batVoltR1 + batVoltR2) / batVoltR2;
  Serial.println(batVoltage);

  if (batVoltage < 2.0) {
    // When bat voltage is below 2.0 volts, enter Deep Sleep for 30 minutes to charge
    esp_sleep_enable_timer_wakeup(30 * 60 * 1000000); // 30 minutes in microseconds
    Serial.println("Entering Deep Sleep, Low Battery");
    esp_deep_sleep_start();
    return; // Exit loop if deep sleep
  }

  digitalWrite(sensorPowerPin, HIGH);  // Turn on the sensor power
  delay(5000); 
  ltr.setMode(LTR390_MODE_UVS);
  delay(10000);
  float uvs = ltr.readUVS();
  delay(5000);
  ltr.setMode(LTR390_MODE_ALS);
  delay(10000);
  float als = ltr.readALS();
  delay(5000);

  bme.performReading();
  float temperature = (bme.temperature * 9 / 5 + 32); //Convert Celsius to Fahrenheit
  float humidity = bme.humidity;
  float pressure = (bme.pressure / 3386.39); // Convert Pa to inHg  

  PM25_AQI_Data data;

  aqi.read(&data);
  float pm10 = data.pm10_standard;
  float pm25 = data.pm25_standard;
  float pm100 = data.pm100_standard;

  int tempThreshold = getTempThreshold(temperature);
  int humThreshold = getHumThreshold(humidity);
  int fanSpeed = calcFanSpeed(tempThreshold, humThreshold);
  
  setFanSpeed(fanSpeed);

  delay(5000);

  digitalWrite(sensorPowerPin, LOW); // Turn off the sensor power

  delay(550000); // Wait 9 minutes, 10 seconds prior to remaining readings.




  float rainfall = weatherMeterKit.getTotalRainfall(); // convert mm to in
  weatherMeterKit.resetTotalRainfall(); //weatherMeterKit.resetTotalRainfall();
  float windspeed = weatherMeterKit.getWindSpeed(); // convert kph to mph
  float winddir = weatherMeterKit.getWindDirection();

  // Read AS3935 sensor data
  intVal = digitalRead(lightningInt);
  bool lightningDetected = false;
  float lightningDistance = 0.0;

  if (intVal == HIGH) {
    Serial.println("Lightning Strike Detected!");
    byte distance = lightning.distanceToStorm();
    lightningDetected = true;
    lightningDistance = distance * 0.621371;
    Serial.print("Approximately: ");
    Serial.print(lightningDistance);
    Serial.println(" miles away!");
  }

  // Create a struct to hold the sensor readings
  struct_message sensorData;
  sensorData.temperature = temperature;
  sensorData.humidity = humidity;
  sensorData.pressure = pressure;
  sensorData.uvs = uvs;
  sensorData.als = als;
  sensorData.pm10 = pm10;
  sensorData.pm25 = pm25;
  sensorData.pm100 = pm100;
  sensorData.rainfall = rainfall;
  sensorData.windspeed = windspeed;
  sensorData.winddir = winddir;
  sensorData.lightningDetected = lightningDetected;
  sensorData.lightningDistance = lightningDistance;
  sensorData.fanSpeed = fanSpeed;
  sensorData.solarVoltage = solarVoltage;
  sensorData.batVoltage = batVoltage;

  // Send sensor data to the receiver ESP32
  esp_err_t result = esp_now_send(receiverAddress, (uint8_t *)&sensorData, sizeof(sensorData));

  if (result == ESP_OK) {
    Serial.println("Data Sent Successfully");
  }
  else {
    Serial.println("Error Sending Data");
  }

  // Wait before next readings
  delay(10000); // Whole loop = 10 minutes
}

int getTempThreshold(float temperature) {
  if (temperature <= 75) return 0; // After testing, return temp to 75
  else if (temperature <= 85) return 30; // After testing, return temp to 85
  else if (temperature <= 95) return 60; // After testing, return temp to 95
  else return 90;
}

int getHumThreshold(float humidity) {
  if (humidity <= 50) return 0; // After testing, return hum to 50
  else if (humidity <= 65) return 30; // After testing, return hum to 65
  else if (humidity <= 90) return 60; // After testing, return hum to 90
  else return 90;
}

int calcFanSpeed(int tempThreshold, int humThreshold) {
  //calc the average of temp and hum thresholds
  int fanSpeed = (tempThreshold + humThreshold) / 2;

  return fanSpeed;
}

void setFanSpeed(int speed) {
  analogWrite(FAN_PIN, map(speed, 0, 100, 0, 255));
}
